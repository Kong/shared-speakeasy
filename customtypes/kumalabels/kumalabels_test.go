package kumalabels_test

import (
	"context"
	"github.com/Kong/shared-speakeasy/customtypes/kumalabels"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"testing"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/stretchr/testify/require"
)

func TestKumaLabelsMapType_ValueFromMap(t *testing.T) {
	t.Parallel()

	ctx := context.Background()

	type testCase struct {
		name           string
		input          map[string]string
		expectedOutput map[string]string
	}

	testCases := []testCase{
		{
			name: "removes kuma.io autogenerated labels",
			input: map[string]string{
				"env":            "prod",
				"app":            "my-service",
				"kuma.io/mesh":   "default",
				"kuma.io/origin": "ingress",
				"custom.label":   "yes",
				"kuma.io/zone":   "east",
			},
			expectedOutput: map[string]string{
				"env":          "prod",
				"app":          "my-service",
				"custom.label": "yes",
			},
		},
		{
			name: "all labels are allowed",
			input: map[string]string{
				"team":    "platform",
				"service": "auth",
			},
			expectedOutput: map[string]string{
				"team":    "platform",
				"service": "auth",
			},
		},
		{
			name: "all labels are kuma.io prefixed and removed",
			input: map[string]string{
				"kuma.io/mesh":   "mesh1",
				"kuma.io/origin": "control-plane",
			},
			expectedOutput: map[string]string{},
		},
	}

	labelType := kumalabels.KumaLabelsMapType{
		MapType: types.MapType{ElemType: types.StringType},
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			t.Parallel()

			elements := make(map[string]attr.Value)
			for k, v := range tc.input {
				elements[k] = types.StringValue(v)
			}
			inputMap := types.MapValueMust(types.StringType, elements)

			filteredVal, diags := labelType.ValueFromMap(ctx, inputMap)
			require.False(t, diags.HasError(), "unexpected diagnostics error: %v", diags)

			filteredMap, diags := filteredVal.ToMapValue(t.Context())
			require.False(t, diags.HasError(), "unexpected diagnostics error: %v", diags)

			output := make(map[string]string)
			for k, v := range filteredMap.Elements() {
				strVal := v.(types.String)
				output[k] = strVal.ValueString()
			}

			require.Equal(t, tc.expectedOutput, output)
		})
	}
}
